buildscript {
    ext.kotlin_version = '1.3.61'
    repositories {
        mavenCentral()
        maven {
            url  "https://dl.bintray.com/kaustav07/com.github.kaustav07"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.2.2.RELEASE")
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group 'com.github.simonpercic.responseecho'
version VERSION_NAME

bootJar {
    archiveBaseName = 'responseecho'
    archiveVersion = VERSION_NAME
}

repositories {
    //mavenLocal()
    jcenter()
    maven {
        url  "https://dl.bintray.com/kaustav07/com.github.kaustav07"
    }
    mavenCentral()
}

sourceCompatibility = 1.8

ext.retrofitVersion = '2.1.0'

dependencies {
    implementation 'com.github.kaustav07:oklog-shared:2.8.0'

    // Spring Framework
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-thymeleaf'

    compile 'org.webjars:bootstrap:4.4.1'
    compile 'com.google.code.gson:gson:2.7'
    compile "com.squareup.retrofit2:retrofit:$retrofitVersion"
    compile "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    compile 'commons-io:commons-io:2.5'

    // Unit test dependencies
    testCompile 'junit:junit:4.12'
    testCompile "org.mockito:mockito-core:1.10.19"
    testCompile 'org.springframework.boot:spring-boot-starter-test'

    implementation 'com.squareup.wire:wire-runtime:2.2.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'com.google.api-client:google-api-client:1.30.5'

}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

task stage(type: Copy, dependsOn: [clean, assemble]) {
    from jar.archivePath
    into project.rootDir
    rename {
        'app.jar'
    }
}
stage.mustRunAfter(clean)

clean {
    doLast {
        project.file('app.jar').delete()
    }
}



